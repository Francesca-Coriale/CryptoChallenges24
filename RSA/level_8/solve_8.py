from Crypto.Util.number import bytes_to_long, getPrime, long_to_bytes
from Crypto.Util.number import inverse
from math import gcd

## Adaptation of the code hastad_broadcast_attack
def iroot(k, n):
    u, s = n, n+1
    while u < s:
        s = u
        t = (k-1) * s + n // pow(s, k-1)
        u = t // k
    return s

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

n = [73086739261286444295386506603282216831814603434813143917549520722555366010815205310118812966942440125913018664923001848151177224957490702757348603547495295648358094882391393170064030796342245635826960381849999545398041836340858514949609012197179084644202891573394599711127508199946427551526688732511934169597, 
     110248035320062272432993397699897514944166718330980103762703974785301760830125829200731092795893861103214383812296557027205965784503839893671746178182753012709257601365409075878065102819982170559175058796436782792481362116517256332654411004791935044049838033393654997681228710437540756587568913702459933426617, 
     122490405162279817990300018501879557441435422592959786602263756110405976389095875733267615186180163828604519087878529543334825304838814612037615612174885353015003605037934733245212110179480757079132617601432999489334160899506534549909300798272020771872579168724555070162759960068034906405597142483413836257111]

e = 3

ciphers = [37530210357019911587973531269840669672515740166127850160463071418094038825740208234541660880266490332147112739644789120241204084114365845964280349395230161893260508383030016574612676698398540815239619508941373497483835375267036187736743447449985950493388232473060197, 
           37530210357019911587973531269840669672515740166127850160463071418094038825740208234541660880266490332147112739644789120241204084114365845964280349395230161893260508383030016574612676698398540815239619508941373497483835375267036187736743447449985950493388232473060197, 
           37530210357019911587973531269840669672515740166127850160463071418094038825740208234541660880266490332147112739644789120241204084114365845964280349395230161893260508383030016574612676698398540815239619508941373497483835375267036187736743447449985950493388232473060197]

#message m is encrypted with 3 (=e) public key k_i = (e, n_i)  => HASTAD'S BROADCAST
# to be sure check if gcd(n_i, n_j) = 1 for all i,j
print("n0, n1: ", gcd(n[0],n[1])) # must be 1
print("n0, n2: ", gcd(n[0],n[2]))
print("n1, n2: ", gcd(n[1],n[2]))

g, u1, v1 = egcd(n[1] * n[2], n[0])  # N / n0
g, u2, v2 = egcd(n[0] * n[2], n[1])  # N / n1
g, u3, v3 = egcd(n[0] * n[1], n[2])  # N / n2

c = (ciphers[0] * u1 * n[1]*n[2] + ciphers[1] * u2* n[0]*n[2] + ciphers[2] * u3 * n[0]*n[1]) % (n[0]*n[1]*n[2])

dec_int = iroot(e, c)
print(long_to_bytes(dec_int))
