from Crypto.Util.number import bytes_to_long, getPrime, long_to_bytes
from Crypto.Util.number import inverse
import math

def decrypt(cipher, d , n ):
    return pow(cipher, d, n)

e = 65537

#to get p,q 
# factordb does not work
# use fermat_factorization
n = 84579385253850209980531118129485716360575269582423585759001305965013034395499445816183248675447710453177558996114910965695049824431833160231360553529286419317374940825879760576417322050461035628520331998356731488662783964882867470865445762024182798458285340930223702904421982112483822508094601373760076526513
p = 9196705130308909169105636708324483461176018336231342158497033528430092427027363603702631273464155871304330602316967980393438012303034650953366081852782561
q = 9196705130308909169105636708324483461176018336231342158497033528430092427027363603702631273464155871304330602316967980393438012303034650953366081852782033
gcd = math.gcd(p,q)
print("gcd: ", gcd) # p and q are coprime
print("near: ", p-q) # p and q are near
phi = (q-1)*(p-1)

d = inverse(e,phi)

c = 17668912838657324025145974741772418705042500725249546941532860274474967308105880488339989276944955996505219230783445824255159192918050910923274393622976856688164873271519593664637389313627158186713709798641755794557335453137110328826176249263923330675599181311888750799280794535134718146446678320514719996743
#decrypted = decrypt(c, key)
decrypted = decrypt(c, d, n)
print(long_to_bytes(decrypted))